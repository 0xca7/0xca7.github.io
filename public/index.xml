<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0xca7</title>
    <link>https://0xca7.github.io/</link>
    <description>Recent content on 0xca7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 31 Aug 2022 19:09:03 +0200</lastBuildDate><atom:link href="https://0xca7.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mount JFFS2 Filesystems</title>
      <link>https://0xca7.github.io/posts/mount_jffs2/</link>
      <pubDate>Wed, 31 Aug 2022 19:09:03 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/mount_jffs2/</guid>
      <description>When reversing firmware, you often just get a blob of data from the vendor website. Usually, you look at it in a hex editor and/or run binwalk on it to identify what the blob contains. I often run into the JFFS2 filesystem (https://en.wikipedia.org/wiki/JFFS2).
Running binwalk -e on the firmware to extract the components will leave you with a JFFS2 file which is not further extracted. The script below can be used on this file to mount it so you can get at the data contained in the filesystem.</description>
    </item>
    
    <item>
      <title>Docker Notes</title>
      <link>https://0xca7.github.io/posts/docker/</link>
      <pubDate>Wed, 31 Aug 2022 16:32:04 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/docker/</guid>
      <description>Docker notes about how to do things with docker for reference.
Installation Best to get the version directly from docker.com, see:
https://docs.docker.com/engine/install/debian/
or
https://docs.docker.com/engine/install/ubuntu/
Images You can get official images via docker directly. See https://hub.docker.com/ - this shows the commands to pull images.
Example:
docker pull debian Containers Creating a container from the image can be done as follows:
Create a container debian_test based on the debian image with full host network access, launch it and attach to it.</description>
    </item>
    
    <item>
      <title>Ghidrathon &#43; Unicorn Engine &#43; Capstone</title>
      <link>https://0xca7.github.io/posts/ghidrathon_unicorn/</link>
      <pubDate>Sun, 28 Aug 2022 19:32:42 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/ghidrathon_unicorn/</guid>
      <description>Ghidra with Ghidrathon + Unicorn Engine The below script is a convenient way to combine the Ghidrathon extension (Python3 in Ghidra) developed by Mandiant [1] and the Unicorn Emulator [2]. As shown in Mandiant&amp;rsquo;s blog post, unicorn is called from the Ghidrathon command line. I took that idea and automated to process a little bit.
My Script I created a simple Ghidra Python3 script that uses unicorn together with the capstone disassembler [3].</description>
    </item>
    
    <item>
      <title>Calling Conventions</title>
      <link>https://0xca7.github.io/posts/calling_conventions/</link>
      <pubDate>Fri, 26 Aug 2022 20:56:15 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/calling_conventions/</guid>
      <description>This is a small overview of calling conventions regarding the x86 and x86_64 architectures, both for Windows and Linux
Windows The stdcall calling convention &amp;hellip; the callee is responsible for cleaning up the stack, but the parameters are pushed onto the stack in right-to-left order, as in the _cdecl calling convention (here: caller must clean up the stack). Registers EAX, ECX, and EDX are designated for use within the function. Return values are stored in the EAX register.</description>
    </item>
    
    <item>
      <title>Collection of Malware Analysis Writeups</title>
      <link>https://0xca7.github.io/posts/malware_analysis/</link>
      <pubDate>Fri, 26 Aug 2022 15:46:59 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/malware_analysis/</guid>
      <description>All of the files below are PDFs, they have been saved as such from my old site.
Analysis of a .NET infostealer Blackguard Stealer
Analysis of the famous Redline stealer Redline Stealer
Analysis of a stealer targeting Linux Systems, written in Go Golang Stealer
Analysis of a botnet malware targeting Linux systems Linux Botnet
Unpacking of the STOP/DJVU Ransomware, contains stealer malware STOP/DJVU Unpacking</description>
    </item>
    
    <item>
      <title>ARM Cortex-M3 libopencm3 Project</title>
      <link>https://0xca7.github.io/posts/libopencm3_project/</link>
      <pubDate>Fri, 29 Jul 2022 20:36:47 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/libopencm3_project/</guid>
      <description>Introduction A while ago I ordered a STM32 Blue Pill board. This normally features a STM32F103C8T6 microcontroller, however, mine has a STM32F103C6T6 on it. I decided to program it using libopencm3 (http://libopencm3.org/). As the STMF103C6T6 does not feature a floating point unit (FPU), I thought I&amp;rsquo;d play with fixed point numbers a little. In this post, I will document the simple fixed-point arithmetic I implemented and show how to use</description>
    </item>
    
  </channel>
</rss>
