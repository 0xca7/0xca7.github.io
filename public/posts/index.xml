<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 0xca7</title>
    <link>https://0xca7.github.io/posts/</link>
    <description>Recent content in Posts on 0xca7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2023 19:11:03 +0200</lastBuildDate><atom:link href="https://0xca7.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Notes on PEB Walking</title>
      <link>https://0xca7.github.io/posts/pebwalk_notes/</link>
      <pubDate>Tue, 17 Oct 2023 19:11:03 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/pebwalk_notes/</guid>
      <description>This is more a note than it is a blog post. Recently, I followed this report about a malware named BLISTER, a current loader. This malware features a walk of the Process Environment Block (PEB) and API hashing to eventually load the functions necessary for its operation from ntdll. I followed this report: https://www.elastic.co/security-labs/blister-loader
As I found the report to be excellent, I aimed to replicate the findings to learn / get better at reversing.</description>
    </item>
    
    <item>
      <title>Reversing AARCH64 C&#43;&#43; Binaries</title>
      <link>https://0xca7.github.io/posts/aarch64_cpp/</link>
      <pubDate>Fri, 06 Jan 2023 18:17:14 +0100</pubDate>
      
      <guid>https://0xca7.github.io/posts/aarch64_cpp/</guid>
      <description>In the files below you can find my notes regarding reversing C++ binaries compiled for AARCH64 / ARM64. The compiler used for all of these is g++, the stripping of one of the binaries was achieved via the strip command. No options were given to g++ when compiling on an aarch64 Debian 11 system. Enjoy.
00 - Basic Classes
01 - Pure Virtual Methods I
02 - Abstract Class
03 - Template</description>
    </item>
    
    <item>
      <title>The Art of Malware Analysis - Course Review</title>
      <link>https://0xca7.github.io/posts/aoma/</link>
      <pubDate>Mon, 12 Sep 2022 10:12:29 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/aoma/</guid>
      <description>A couple of months ago I surprisingly won a voucher for The Art of Malware Analysis by @nu11charb (course: https://courses.null-char.com/courses/the-art-of-malware-analysis).
Time to do my part and review the course. I like small reviews, so I will keep it at that.
Review Let&amp;rsquo;s start with a summary of the key points I noticed while doing the course.
Key Points very thourough, covers basic and intermediate malware analysis topics expects students to do the supplied exercises to understand the material works with real-world malware covers x86 assembly in an accessible way covers automating tasks and config extraction Details The course starts with a general introduction to malware and the analysis of malware.</description>
    </item>
    
    <item>
      <title>Ghidrathon &#43; Unicorn Engine &#43; Capstone</title>
      <link>https://0xca7.github.io/posts/ghidrathon_unicorn/</link>
      <pubDate>Sun, 28 Aug 2022 19:32:42 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/ghidrathon_unicorn/</guid>
      <description>Ghidra with Ghidrathon + Unicorn Engine The below script is a convenient way to combine the Ghidrathon extension (Python3 in Ghidra) developed by Mandiant [1] and the Unicorn Emulator [2]. As shown in Mandiant&amp;rsquo;s blog post, unicorn is called from the Ghidrathon command line. I took that idea and automated to process a little bit.
My Script I created a simple Ghidra Python3 script that uses unicorn together with the capstone disassembler [3].</description>
    </item>
    
    <item>
      <title>ARM Cortex-M3 libopencm3 Project</title>
      <link>https://0xca7.github.io/posts/libopencm3_project/</link>
      <pubDate>Fri, 29 Jul 2022 20:36:47 +0200</pubDate>
      
      <guid>https://0xca7.github.io/posts/libopencm3_project/</guid>
      <description>Introduction A while ago I ordered a STM32 Blue Pill board. This normally features a STM32F103C8T6 microcontroller, however, mine has a STM32F103C6T6 on it. I decided to program it using libopencm3 (http://libopencm3.org/). As the STMF103C6T6 does not feature a floating point unit (FPU), I thought I&amp;rsquo;d play with fixed point numbers a little. In this post, I will document the simple fixed-point arithmetic I implemented and show how to use</description>
    </item>
    
  </channel>
</rss>
