<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on 0xca7</title>
    <link>https://0xca7.github.io/notes/</link>
    <description>Recent content in Notes on 0xca7</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 Nov 2022 19:24:18 +0100</lastBuildDate><atom:link href="https://0xca7.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Firmware Emulation with Docker</title>
      <link>https://0xca7.github.io/notes/docker_emulation/</link>
      <pubDate>Mon, 14 Nov 2022 19:24:18 +0100</pubDate>
      
      <guid>https://0xca7.github.io/notes/docker_emulation/</guid>
      <description>Resources My main resources for this post is the talk here:
https://www.youtube.com/watch?v=ALn0hUxNszI&amp;amp;t=1288s
Credit to the Author.
I just took what he&amp;rsquo;s doing and made it work on my machine, instead of MIPS I&amp;rsquo;m running ARM though. I expand upon the examples in the talk by adding some stuff of my own.
Create a Dockerfile MIPS from the talk in [Resources]:
FROM multiarch/debian-debootstrap:mips-buster-slim as qemu FROM scratch ADD ./firmware.tar.gz / COPY --from=qemu /usr/bin/qemu-mips-static /usr/bin CMD [&amp;#34;/usr/bin/qemu-mips-static&amp;#34;, &amp;#34;bin/busybox&amp;#34;] ENV ARCH=mips ARM from my setup:</description>
    </item>
    
    <item>
      <title>Lattice Cryptography Notes</title>
      <link>https://0xca7.github.io/notes/pq_lattice/</link>
      <pubDate>Wed, 14 Sep 2022 19:42:07 +0200</pubDate>
      
      <guid>https://0xca7.github.io/notes/pq_lattice/</guid>
      <description>These are my notes for lattice crypto, please mind the mentioned authors that enabled me to take these notes. All credit goes to those people, not me.
see notes here &amp;raquo; Notes on Lattice Cryptography &amp;laquo;</description>
    </item>
    
    <item>
      <title>Debian ARM/aarch64 in virt-manager</title>
      <link>https://0xca7.github.io/notes/virt-manager-arm/</link>
      <pubDate>Thu, 01 Sep 2022 18:45:47 +0200</pubDate>
      
      <guid>https://0xca7.github.io/notes/virt-manager-arm/</guid>
      <description>This note describes how to use virt-manager on a x86-64 system and install an ARM or aarch64 operating system, namely Debian Linux.
Requirements First install all requirements:
sudo apt install -y virt-manager qemu-kvm python-is-python3 guestfish Enable and run libvirtd
sudo systemctl enable libvirtd sudo systemctl start libvirtd Add your user to the appropriate group
sudo usermod -a -G libvirt $USER Best to reboot after this.
Debian Installation We need the Debian DVD as it comes with all the components we are interested in.</description>
    </item>
    
    <item>
      <title>Mount JFFS2 Filesystems</title>
      <link>https://0xca7.github.io/notes/mount_jffs2/</link>
      <pubDate>Wed, 31 Aug 2022 19:09:03 +0200</pubDate>
      
      <guid>https://0xca7.github.io/notes/mount_jffs2/</guid>
      <description>When reversing firmware, you often just get a blob of data from the vendor website. Usually, you look at it in a hex editor and/or run binwalk on it to identify what the blob contains. I often run into the JFFS2 filesystem (https://en.wikipedia.org/wiki/JFFS2).
Running binwalk -e on the firmware to extract the components will leave you with a JFFS2 file which is not further extracted. The script below can be used on this file to mount it so you can get at the data contained in the filesystem.</description>
    </item>
    
    <item>
      <title>Docker Notes</title>
      <link>https://0xca7.github.io/notes/docker/</link>
      <pubDate>Wed, 31 Aug 2022 16:32:04 +0200</pubDate>
      
      <guid>https://0xca7.github.io/notes/docker/</guid>
      <description>Docker notes about how to do things with docker for reference.
Installation Best to get the version directly from docker.com, see:
https://docs.docker.com/engine/install/debian/
or
https://docs.docker.com/engine/install/ubuntu/
Images You can get official images via docker directly. See https://hub.docker.com/ - this shows the commands to pull images.
Example:
docker pull debian Containers Creating a container from the image can be done as follows:
Create a container debian_test based on the debian image with full host network access, launch it and attach to it.</description>
    </item>
    
    <item>
      <title>Calling Conventions</title>
      <link>https://0xca7.github.io/notes/calling_conventions/</link>
      <pubDate>Fri, 26 Aug 2022 20:56:15 +0200</pubDate>
      
      <guid>https://0xca7.github.io/notes/calling_conventions/</guid>
      <description>This is a small overview of calling conventions regarding the x86 and x86_64 architectures, both for Windows and Linux
Windows The stdcall calling convention &amp;hellip; the callee is responsible for cleaning up the stack, but the parameters are pushed onto the stack in right-to-left order, as in the _cdecl calling convention (here: caller must clean up the stack). Registers EAX, ECX, and EDX are designated for use within the function. Return values are stored in the EAX register.</description>
    </item>
    
  </channel>
</rss>
